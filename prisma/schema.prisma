// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  role         Role     @default(INVESTOR)
  referralCode String   @unique @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  referredById String? // ID of the user who referrewd this user (optional)
  referredBy   User?   @relation("Referrals", fields: [referredById], references: [id])
  referrals    User[]  @relation("Referrals") // Users who were referred by this user

  profile      UserProfile?
  investments  Investment[]
  transactions Transaction[]
  savings      Saving[]
  documents    Document[]
}

model UserProfile {
  id            String  @id @default(uuid())
  phoneNumber   String?
  address       String?
  bankName      String? // Bank name for withdrawal
  accountNumber String? // Account number for withdrawal
  userId        String  @unique
  user          User    @relation(fields: [userId], references: [id])
}

model Cattle {
  id            String       @id @default(uuid())
  tagId         String       @unique
  name          String? // Cattle name (optional)
  breed         String // Cattle breed
  gender        Gender
  birthDate     DateTime
  initialWeight Float
  status        CattleStatus @default(AVALIABLE)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  updates      CattleUpdate[] // History of cattle updates
  investmentId String?
  investment   Investment?    @relation(fields: [investmentId], references: [id])
}

model CattleUpdate {
  id          String   @id @default(uuid())
  date        DateTime @default(now())
  weight      Float
  healthNotes String
  photoUrl    String?

  // Relation
  cattleId String
  cattle   Cattle @relation(fields: [cattleId], references: [id])
}

model Investment {
  id              String       @id @default(uuid())
  investmentDate  DateTime     @default(now())
  initialAmount   Float
  projectedProfit Float?
  finalProfit     Float?
  status          InvestStatus @default(ACTIVE)

  investorId String
  investor   User     @relation(fields: [investorId], references: [id])
  cattles    Cattle[]

  transactions Transaction[]
  documents    Document[]
  insurances   Insurance[]
  shipments    Shipment[]
}

model Saving {
  id        String       @id @default(uuid())
  name      String
  balance   Float        @default(0)
  status    SavingStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  transactions Transaction[]
  documents    Document[]
}

model Transaction {
  id        String          @id @default(uuid())
  amount    Float
  type      TransactionType
  status    PaymentStatus   @default(PENDING)
  notes     String?
  createdAt DateTime        @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  investmentId String?
  investment   Investment? @relation(fields: [investmentId], references: [id])

  savingId String?
  saving   Saving? @relation(fields: [savingId], references: [id])
}

model Document {
  id         String       @id @default(uuid())
  name       String
  url        String
  type       DocumentType
  uploadedAt DateTime     @default(now())

  userId       String?
  user         User?       @relation(fields: [userId], references: [id])
  investmentId String?
  investment   Investment? @relation(fields: [investmentId], references: [id])
  savingId     String?
  saving       Saving?     @relation(fields: [savingId], references: [id])
}

model Insurance {
  id             String           @id @default(uuid())
  policyNumber   String           @unique
  provider       String
  coverageAmount Float
  startDate      DateTime
  endDate        DateTime
  status         InsurancesStatus @default(ACTIVE)

  Investment   Investment? @relation(fields: [investmentId], references: [id])
  investmentId String?
}

model Shipment {
  id             String         @id @default(uuid())
  shippingDate   DateTime
  trackingNumber String?
  address        String
  recipient      String
  status         ShipmentStatus @default(PROCESSING)

  Investment   Investment? @relation(fields: [investmentId], references: [id])
  investmentId String?     @unique
}

// Enums
enum Role {
  ADMIN
  INVESTOR
}

enum Gender {
  MALE
  FEMALE
}

enum CattleStatus {
  AVALIABLE
  INVESTED
  SOLD
  DECEASED
}

enum InvestStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum SavingStatus {
  ACTIVE
  CLOSED
}

enum TransactionType {
  INVESTMENT_DEPOSIT
  PROFIT_PAYOUT
  SAVING_DEPOSIT
  SAVING_WITHDRAWAL
  REFERRAL_COMMISSION
  GENERAL_WITHDRAWAL
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum DocumentType {
  AGREEMENT
  PAYMENT_PROOF
  INSURANCE_POLICY
  IDENTITY_CARD
  OTHER
}

enum InsurancesStatus {
  ACTIVE
  CLAIMED
  EXPIRED
}

enum ShipmentStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
